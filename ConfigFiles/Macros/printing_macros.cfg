[gcode_macro MATERIAL_PA]
gcode:
    {% set MATERIAL = params.MATERIAL|default("XXX")|string %}
    {% set TEXT ="Setting PA for " + MATERIAL %}
    {% set PLA = printer["gcode_macro MACROS_VARS"].pla_pa|default(0)%}
    {% set PET = printer["gcode_macro MACROS_VARS"].pet_pa|default(0)%}
    {% set ABS = printer["gcode_macro MACROS_VARS"].abs_pa|default(0)%}
    {% set PETZ = printer["gcode_macro MACROS_VARS"].pet_za|default(0)%}
    {% if MATERIAL == "PLA" %}
      SET_PRESSURE_ADVANCE ADVANCE={PLA}
    {% elif MATERIAL == "PET" %}
      SET_PRESSURE_ADVANCE ADVANCE={PET}
      SET_GCODE_OFFSET Z_ADJUST={PETZ} MOVE=1
    {% elif MATERIAL == "ABS" %}
      SET_PRESSURE_ADVANCE ADVANCE={ABS}
    {% else %}
       {% set TEXT ="No PA value for " + MATERIAL %}
    {% endif %}
    DISPLAYTEXT TEXT="{TEXT}" 

[gcode_macro PURGE_LINE]
gcode:
    DISPLAYTEXT TEXT="Prime Line"
    G1 X75 E25 F1000                   ; Extrude filament 25mm (how much it retracted in PRINT_END).
    G92 E0;
    G90
    G0 X75 Y4 F6000                     ; Go to X3 Y3
    G1 Z0.2 F200                        ; Set nozzle height
    G91
    G1 X150 E30 F1200;                  ; intro line
    G1 Y1                               ; move Y 1
    G1 X-150 E30 F1200;                 ; intro line
    G92 E0.0                            ; reset extrusion distance
    G1 Z1 F5000                         ; Lift Z   
 
[gcode_macro PRINT_START]
# Use PRINT_START for the slicer starting script - please customise for your slicer of choice
# Start GCODE should be for Prusa Slicer or SuperSlicer: print_start EXTRUDER_TEMP=[first_layer_temperature] BED_TEMP=[first_layer_bed_temperature]
# Start GCODE should be for Cura: print_start EXTRUDER_TEMP=[material_print_temperature] BED_TEMP=[material_bed_temperature]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(205)|float %}  
    {% set ENCLOSURE_TEMP = params.ENCLOSURE_TEMP|default(45)|int %}
    {% set PROBE_TEMP = printer["gcode_macro MACROS_VARS"].probe_temp|default(0)%}
    {% set FILAMENT = params.FILAMENT|default(PLA) %}

    SET_TEMP HEATER="bed" TEMP={BED_TEMP} ; set final bed temp
    SET_TEMP HEATER="extruder" TEMP={PROBE_TEMP} WAIT=1 ; set hotend to 150 for heatsoak
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        DISPLAYTEXT TEXT="Homing"
        G28
    {% endif %}
    DISPLAYTEXT TEXT="Heating Bed"
    SET_TEMP HEATER="bed" TEMP={BED_TEMP} WAIT=1 ;wait final bed temp
    {% if FILAMENT == 'ABS' or FILAMENT == 'ASA' %}
        DISPLAYTEXT TEXT="Heat soaking"
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={ENCLOSURE_TEMP}
    {% endif %}
    {% if not printer.z_tilt.applied %}
        DISPLAYTEXT TEXT="Z tilt thingy"
        Z_TILT_ADJUST
    {% endif %}     
    MATERIAL_PA MATERIAL={FILAMENT}
    DISPLAYTEXT TEXT="Heating Extruder" 
    SET_TEMP HEATER="extruder" TEMP={EXTRUDER_TEMP} WAIT=1 ;wait final extruder temp  
    #BED_MESH_PROFILE LOAD=default
    BED_MESH_CALIBRATE
    MATERIAL_PA MATERIAL={FILAMENT}
    G4 P1000
    PURGE_LINE
    {% if FILAMENT == 'ABS' or FILAMENT == 'ASA' %}
        NEVERMORE_START_PRINT
    {% endif %}
    DISPLAYTEXT TEXT="Printing..."


[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28
    G0 X150 Y150 Z30 F3600

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% set FILAMENT = params.FILAMENT|default(PLA) %}  
    
    #   Check end position to determine safe directions to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-25.0 F1800                 ; retract filament
    G91                            ; relative positioning
    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing

    TURN_OFF_HEATERS
    M107                             ; turn off fan
    G1 Z2 F3000                      ; move nozzle up 2mm
    G90                              ; absolute positioning
    G0 X{max_x / 2} Y{max_y} F3600   ; park nozzle at rear
    #BED_MESH_CLEAR

    {% if FILAMENT == 'ABS' or params.FILAMENT == 'ASA' %}
        NEVERMORE_END_PRINT
    {% endif %}

    DISPLAYTEXT TEXT="Print Complete"
    
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  TURN_OFF_HEATERS
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  PRINT_END
  BASE_CANCEL_PRINT    

[gcode_macro SET_TEMP]
gcode:
    {% set HEATER = params.HEATER|default("")|string %}
    {% set TEMP = params.TEMP|default(0)|int %}
    {% set WAIT = params.WAIT|default(0)|int %}

    {% if HEATER == "extruder" %}
      {% if WAIT == 1 %}
    M109 S{TEMP}
      {% else %}
    M104 S{TEMP}
      {% endif %}
    {% else %}
     {% if WAIT == 1 %}
    M190 S{TEMP}
      {% else %}
    M140 S{TEMP}
      {% endif %}
    {% endif %}  

[gcode_macro ENDING_RETRACTION]
gcode:    
     {% set RETRACT = printer["gcode_macro MACROS_VARS"].ending_length|default(0)%}
     G1 E{RETRACT*-1} F1800     

[gcode_macro PARK_AT_PRINT_END]
gcode:
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}

    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear   